from collections import defaultdict
from PyQt5 import QtWidgets


def concordancer(quran, word, search_type, words_num):
    """
    Search a word in Quran with the same lemme or root or both
    :param quran: quran index generated by application
    :param word: the word searched
    :param search_type: the type of search (lemme, root, or both)
    :param words_num: number of words extracted
            before and after the word searched
    :return: list result
    """
    lemme, root = '', ''
    # search if the word exists in the quran at least once
    for (key, word_quran) in quran.items():
        QtWidgets.QApplication.processEvents()
        # if the word with or without tashkil is in the quran?
        if word in word_quran[:2]:
            lemme, root = word_quran[2:]  # get the lemma and the root of word
            break
    # if the word exists in the quran then we do a search
    list_results = defaultdict(list)
    if lemme:
        # define the type of search
        if search_type.lower() == 'lemme':
            list_search_in = [lemme]
        elif search_type.lower() == 'root':
            list_search_in = [root]
        else:
            list_search_in = [lemme, root]
        list_num_versets = sorted(quran.keys())
        words_num = int(words_num)
        for key, word_quran in quran.items():
            QtWidgets.QApplication.processEvents()
            """
            if the lemma or word root is
            the same lemma or root of the searched word
            """
            if word_quran[2] in list_search_in or \
                    word_quran[3] in list_search_in:
                # take the words which are before or after the searched word
                # compared to the number of words in parameter
                ind_key_min = list_num_versets.index(key) - words_num
                if ind_key_min < 0:
                    ind_key_min = 0
                list_num_versets_results = list_num_versets[
                                           ind_key_min:list_num_versets.index(
                                               key) + words_num + 1]
                list_num_versets_results = [numPosWord for numPosWord in
                                            list_num_versets_results
                                            if numPosWord[:-4] == key[:-4]]
                # add results
                if key[:7] not in list_results.keys():
                    list_results[key[:7]] = [[key], list_num_versets_results]
                else:
                    list_results[key[:7]][0].append(key)
                    list_results[key[:7]][1] = sorted(
                        set(list_results[key[:7]][1] +
                            list_num_versets_results))
    return list_results
